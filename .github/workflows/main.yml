name: dotnet-workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
  
    runs-on: ubuntu-latest 
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x   
  
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./source/TRILHAR.Services.Api # Atualize com base no resultado do `ls`
      
    - name: Build
      run: dotnet build --no-restore
      working-directory: ./source/TRILHAR.Services.Api # Atualize com base no resultado do `ls`
      
    - name: Publish artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: publish
        path: ./source/TRILHAR.Services.Api/bin/Release/net6.0/publish/

  ftp-deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts created at previous job
      uses: actions/download-artifact@v3
      with:
        name: publish # Mesma string usada no passo `upload-artifact`
        path: ./artifact # O caminho local onde o artefato será extraído

    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@master
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./artifact # Use o mesmo `path` do `download-artifact`
        server-dir: iques.com.br/httpdocs/webapp/
        protocol: ftps
        dangerous-clean-slate: true # opcional
